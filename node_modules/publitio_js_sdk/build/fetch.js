"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchService = void 0;

var _axios = _interopRequireDefault(require("axios"));

var _constants = require("./constants");

var _helper = require("./helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FetchService =
/*#__PURE__*/
function () {
  function FetchService() {
    _classCallCheck(this, FetchService);
  }

  _createClass(FetchService, [{
    key: "checkResponseStatus",
    value: function checkResponseStatus(response) {
      if (response.status >= 200 && response.status < 300 || _constants.KNOWN_ERROR_CODES.includes(response.status)) {
        return response;
      }

      var error = new Error(response.statusText);
      error.response = response;
      throw error;
    }
  }, {
    key: "callApi",
    value: function callApi(url, method) {
      var _this = this;

      return (0, _axios.default)({
        method: method,
        url: url,
        validateStatus: function validateStatus() {
          return true;
        }
      }).then(function (res) {
        return _this.checkResponseStatus(res);
      }).then(function (res) {
        return res.data;
      });
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(formData, url) {
      var _this2 = this;

      var req;

      if (_helper.runningInNode) {
        req = _axios.default.post(url, formData.getBuffer(), _defineProperty({
          validateStatus: validateStatus,
          headers: formData.getHeaders()
        }, "validateStatus", function validateStatus() {
          return true;
        }));
      } else {
        req = _axios.default.post(url, formData, {
          validateStatus: function validateStatus() {
            return true;
          }
        });
      }

      return req.then(function (res) {
        return _this2.checkResponseStatus(res);
      }).then(function (res) {
        return res.data;
      });
    }
  }]);

  return FetchService;
}();

var fetchService = new FetchService();
exports.fetchService = fetchService;
//# sourceMappingURL=fetch.js.map