{"version":3,"sources":["../src/fetch.js"],"names":["FetchService","response","status","KNOWN_ERROR_CODES","includes","error","Error","statusText","url","method","validateStatus","then","res","checkResponseStatus","data","formData","req","runningInNode","axios","post","getBuffer","headers","getHeaders","fetchService"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;IAEMA,Y;;;;;;;;;wCACiBC,Q,EAAU;AAC7B,UAAKA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAA7C,IAAqDC,6BAAkBC,QAAlB,CAA2BH,QAAQ,CAACC,MAApC,CAAzD,EAAsG;AACpG,eAAOD,QAAP;AACD;;AAED,UAAMI,KAAK,GAAG,IAAIC,KAAJ,CAAUL,QAAQ,CAACM,UAAnB,CAAd;AACAF,MAAAA,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;AACA,YAAMI,KAAN;AACD;;;4BAEQG,G,EAAKC,M,EAAQ;AAAA;;AACpB,aAAO,oBAAM;AACXA,QAAAA,MAAM,EAANA,MADW;AAEXD,QAAAA,GAAG,EAAHA,GAFW;AAGXE,QAAAA,cAAc,EAAE;AAAA,iBAAM,IAAN;AAAA;AAHL,OAAN,EAKJC,IALI,CAKC,UAAAC,GAAG;AAAA,eAAI,KAAI,CAACC,mBAAL,CAAyBD,GAAzB,CAAJ;AAAA,OALJ,EAMJD,IANI,CAMC,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACE,IAAR;AAAA,OANJ,CAAP;AAOD;;;+BAEWC,Q,EAAUP,G,EAAK;AAAA;;AACzB,UAAIQ,GAAJ;;AAEA,UAAIC,qBAAJ,EAAmB;AACjBD,QAAAA,GAAG,GAAGE,eAAMC,IAAN,CAAWX,GAAX,EAAgBO,QAAQ,CAACK,SAAT,EAAhB;AACJV,UAAAA,cAAc,EAAdA,cADI;AAEJW,UAAAA,OAAO,EAAEN,QAAQ,CAACO,UAAT;AAFL,6BAGY;AAAA,iBAAM,IAAN;AAAA,SAHZ,EAAN;AAKD,OAND,MAMO;AACLN,QAAAA,GAAG,GAAGE,eAAMC,IAAN,CAAWX,GAAX,EAAgBO,QAAhB,EAA0B;AAAEL,UAAAA,cAAc,EAAE;AAAA,mBAAM,IAAN;AAAA;AAAlB,SAA1B,CAAN;AACD;;AAED,aAAOM,GAAG,CACPL,IADI,CACC,UAAAC,GAAG;AAAA,eAAI,MAAI,CAACC,mBAAL,CAAyBD,GAAzB,CAAJ;AAAA,OADJ,EAEJD,IAFI,CAEC,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACE,IAAR;AAAA,OAFJ,CAAP;AAGD;;;;;;AAGI,IAAMS,YAAY,GAAG,IAAIvB,YAAJ,EAArB","sourcesContent":["import axios from 'axios'\nimport { KNOWN_ERROR_CODES } from './constants'\nimport { runningInNode } from './helper'\n\nclass FetchService {\n  checkResponseStatus (response) {\n    if ((response.status >= 200 && response.status < 300) || KNOWN_ERROR_CODES.includes(response.status)) {\n      return response\n    }\n\n    const error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n\n  callApi (url, method) {\n    return axios({\n      method,\n      url,\n      validateStatus: () => true,\n    })\n      .then(res => this.checkResponseStatus(res))\n      .then(res => res.data)\n  }\n\n  uploadFile (formData, url) {\n    let req\n\n    if (runningInNode) {\n      req = axios.post(url, formData.getBuffer(), {\n        validateStatus,\n        headers: formData.getHeaders(),\n        validateStatus: () => true,\n      })\n    } else {\n      req = axios.post(url, formData, { validateStatus: () => true, })\n    }\n\n    return req\n      .then(res => this.checkResponseStatus(res))\n      .then(res => res.data)\n  }\n}\n\nexport const fetchService = new FetchService()\n"],"file":"fetch.js"}